{"version":3,"sources":["components/startTimerComponent.js","components/shortBreakComponent.js","components/longBreakComponent.js","redux/ActionTypes.js","redux/ActionCreators.js","components/settingComponent.js","components/PauseComponent.js","components/MainComponent.js","Shared/settings.js","redux/reducers/allreducers.js","redux/reducers/settings.js","redux/Store.js","App.js","reportWebVitals.js","index.js"],"names":["minutes","countDown","seconds","a","RunTime","clearTimeout","StartTimer","props","state","date","Date","this","timerID","setInterval","tick","clearInterval","sound","map","document","getElementsByClassName","pause","play","setState","getTime","setTimeout","CheckTime","timer","times","onetimerun","className","href","to","src","Component","ShortBreak","second","parseInt","startTimeInSeconds","interval","shortBreakTime","LongBreak","longBreakTime","SAVE_SETTING","saveSetting","type","ActionTypes","payload","required","val","length","maxLength","len","maxTime","Number","isNumber","isNaN","withRouter","history","useHistory","dispatch","useDispatch","onSubmit","values","push","handleSave","htmlFor","text","model","id","validators","show","messages","checkbox","name","value","Pause","Main","path","component","alt","SettingsReducer","connect","SETTINGS","persistConfig","key","storage","whitelist","allreducer","combineReducers","action","setting","persistReducer","Store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","App","store","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d71aa8f1.chunk.js","sourcesContent":["\r\nimport React, { Component } from \"react\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nvar seconds=60;\r\nvar minutes;\r\nvar a = 1;\r\nvar countDown;\r\n\r\nfunction showpause(){\r\n    if(seconds === 0 && minutes === 0){         \r\n        return\r\n    \r\n}\r\nelse {\r\n    return(\r\n        <button className=\"btnpause\"><Link to=\"/pause\">Pause</Link></button>\r\n        );\r\n}\r\n}\r\n\r\n\r\n\r\n \r\nfunction changerestart(){\r\n    if(seconds != 0){\r\n        return(\r\n            <button className=\"btnrestart\"><a href=\"/start\">Restart</a></button>\r\n            );\r\n        }\r\n    else {\r\n        return(\r\n        <button className=\"btnrestart\"><a href=\"/start\">Start</a></button>\r\n        );\r\n    }\r\n\r\n}\r\n \r\n\r\n\r\nfunction CheckTime (getTime){\r\n    \r\n    minutes = getTime \r\n     countDown = setTimeout(() => {\r\n        RunTime()\r\n    },1000\r\n    );\r\n   \r\n \r\n}\r\n\r\n\r\n\r\n\r\nfunction RunTime (){\r\n    \r\n    if(minutes === 0 && seconds === 0){\r\n\r\n        return (clearTimeout(countDown),\r\n        <p>\r\n        Take Break\r\n        </p>\r\n        );\r\n    }\r\n    if(seconds === 0){\r\n        seconds = 60;\r\n    }\r\n    if(seconds === 60){\r\n        minutes--;\r\n    }\r\n        seconds--\r\n\r\n        if(seconds < 10){\r\n            return (\r\n                <p>\r\n                    \r\n                    {minutes + \":\" + \"0\" + seconds}\r\n                   \r\n                </p>\r\n    \r\n          \r\n                \r\n            );\r\n\r\n        }\r\n        return (\r\n            <p>\r\n                \r\n                {minutes + \":\" + seconds}\r\n               \r\n            </p>\r\n\r\n      \r\n            \r\n        );\r\n           \r\n      \r\n}\r\n\r\n\r\n\r\n\r\n     \r\n\r\n\r\nclass StartTimer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {date: new Date()};\r\n      }\r\n    \r\n      componentDidMount() {\r\n        this.timerID = setInterval(\r\n          () => this.tick(),\r\n          1000\r\n        );\r\n      }\r\n    \r\n      componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n      }\r\n    \r\n      tick() {       \r\n        var sound = this.props.sound.map((sound) => {\r\n            return (\r\n                \r\n                   sound.sound\r\n               \r\n            );\r\n          })\r\n          if(sound[0] == true){\r\n\r\n            if(seconds === 0 && minutes === 0){\r\n                const audioEl = document.getElementsByClassName(\"audio-element\")[0]         \r\n                audioEl.pause()\r\n            \r\n             }\r\n            else {\r\n                const audioEl = document.getElementsByClassName(\"audio-element\")[0]\r\n                audioEl.play()\r\n            }\r\n\r\n\r\n\r\n          }\r\n        this.setState({\r\n          date: new Date()\r\n        });\r\n      }\r\n    \r\n\r\n      onetimerun(getTime){\r\n        if (a === 1){\r\n            a = 0;\r\n            \r\n            {CheckTime(getTime)} ;\r\n\r\n        }\r\n      }\r\n\r\n\r\n\r\n    \r\n    render(){\r\n       \r\n        var getTime = this.props.timer.map((times) => {\r\n            return (\r\n                times.timer\r\n            );\r\n        })\r\n        this.onetimerun(getTime);\r\n       \r\n\r\n        return(\r\n            <>\r\n                 \r\n              <div className=\"superwrapper\">\r\n                <div className=\"outerwrapper\">\r\n                    <div className=\"settingwrapper\">\r\n                        <a className=\"btnsetting\" href=\"./shortbr\">Short Break</a>\r\n                        <a className=\"btnsetting\" href=\"./setting\">Setting</a>\r\n                        <a className=\"btnsetting\" href=\"./longbr\">Long Break</a>\r\n                    </div>\r\n                    <div className=\"innerwrapper\">\r\n                        <div className=\"timestarted\">\r\n                          \r\n\r\n                            {RunTime()}\r\n                                \r\n                            \r\n         \r\n                        </div>\r\n                        <div className=\"btnpauserestart\">\r\n                            {showpause()}\r\n                            {changerestart()}\r\n                            \r\n\r\n                        </div>\r\n                               \r\n                       \r\n\r\n                        \r\n\r\n                         \r\n                    </div>\r\n                    <audio className=\"audio-element\">\r\n                    <source src=\"./audio/tick.mp3\"></source>\r\n                  </audio>\r\n                </div>\r\n                \r\n            </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StartTimer ","import React, { Component } from \"react\";\r\n\r\n\r\n\r\nvar seconds=60;\r\nvar minutes ;\r\nvar a = 1;\r\nvar countDown;\r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\nfunction CheckTime (getTime){\r\n    \r\n    minutes = getTime \r\n     countDown = setTimeout(() => {\r\n        RunTime()\r\n    },1000 \r\n    );\r\n   \r\n \r\n}\r\n\r\n\r\n\r\n\r\nfunction RunTime (){\r\n\r\n    \r\n    if(minutes === 0 && seconds === 0){\r\n\r\n        return (clearTimeout(countDown),\r\n        <p>\r\n        Break End\r\n        </p>\r\n        );\r\n    }\r\n    if(seconds === 0){\r\n        seconds = 60;\r\n    }\r\n    if(seconds === 60){\r\n        minutes--;\r\n    }\r\n\r\n\r\n        seconds--\r\n\r\n        if(seconds < 10){\r\n          return (\r\n              <p>\r\n                    \r\n                  {minutes + \":\" + \"0\" + seconds}\r\n                  \r\n              </p>\r\n\r\n          \r\n                \r\n            );\r\n\r\n      }\r\n        return (\r\n            <p>\r\n                {minutes + \":\" + seconds}\r\n            </p>    \r\n            \r\n        );\r\n           \r\n      \r\n}\r\n\r\n\r\nclass ShortBreak extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          second: parseInt(props.startTimeInSeconds, 10) || 0\r\n        };\r\n      }\r\n    \r\n      tick() {\r\n        var sound = this.props.sound.map((sound) => {\r\n          return (\r\n              \r\n                 sound.sound\r\n             \r\n          );\r\n        })\r\n        if(sound[0] == true){\r\n\r\n          if(seconds === 0 && minutes === 0){\r\n              const audioEl = document.getElementsByClassName(\"audio-element\")[0]         \r\n              audioEl.pause()\r\n          \r\n           }\r\n          else {\r\n              const audioEl = document.getElementsByClassName(\"audio-element\")[0]\r\n              audioEl.play()\r\n          }\r\n\r\n\r\n\r\n        }\r\n        this.setState(state => ({\r\n          second: state.second + 1\r\n        }));\r\n      }\r\n    \r\n      componentDidMount() {\r\n        this.interval = setInterval(() => this.tick(), 1000);\r\n      }\r\n    \r\n      componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n      }\r\n\r\n      onetimerun(getTime){\r\n        if (a === 1){\r\n            a = 0;\r\n            \r\n            {CheckTime(getTime)} ;\r\n\r\n        }\r\n      }\r\n\r\n      \r\n\r\n    \r\n    render(){\r\n       \r\n\r\n\r\n       var getTime = this.props.shortBreakTime.map((times) => {\r\n            return (\r\n                \r\n                   times.shortBreakTime\r\n               \r\n            );\r\n        })\r\n\r\n\r\n        this.onetimerun(getTime);\r\n       \r\n       \r\n\r\n        return(\r\n            <>\r\n            <div className=\"superwrapper\">\r\n              <div className=\"outerwrapper\">\r\n                  <div className=\"settingwrapper\">\r\n                      <a className=\"btnsetting\" href=\"./shortbr\">Short Break</a>\r\n                      <a className=\"btnsetting\" href=\"./setting\">Setting</a>\r\n                      <a className=\"btnsetting\" href=\"./longbr\">Long Break</a>\r\n                  </div>\r\n                  <div className=\"innerwrapper\">\r\n                      <div className=\"currentstate\">\r\n                      <p>Short Break</p>\r\n                      </div>\r\n                      <div className=\"timestarted\">\r\n                          {RunTime()} \r\n                          \r\n                      </div>\r\n                      <div className=\"btnstart\">\r\n                        <a className=\"btnstart\" href=\"./start\">Start Timer</a>\r\n\r\n                      </div>\r\n\r\n                  </div>\r\n                  <audio className=\"audio-element\">\r\n                    <source src=\"./audio/tick.mp3\"></source>\r\n                  </audio>\r\n              </div>\r\n              \r\n          </div>\r\n          </>\r\n        );\r\n        \r\n    }\r\n}\r\n\r\nexport default ShortBreak","import React, { Component } from \"react\";\r\n\r\n\r\nvar seconds=60;\r\nvar minutes ;\r\nvar a = 1;\r\nvar countDown;\r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\nfunction CheckTime (getTime){\r\n    \r\n    minutes = getTime \r\n     countDown = setTimeout(() => {\r\n        RunTime()\r\n    },1000\r\n    );\r\n   \r\n \r\n}\r\n\r\n\r\n\r\n\r\nfunction RunTime (){\r\n    \r\n    \r\n    if(minutes === 0 && seconds === 0){\r\n\r\n        return (clearTimeout(countDown),\r\n        <p>\r\n        Break End\r\n        </p>\r\n        );\r\n    }\r\n    if(seconds === 0){\r\n        seconds = 60;\r\n    }\r\n    if(seconds === 60){\r\n        minutes--;\r\n    }\r\n\r\n\r\n\r\n        seconds--\r\n        if(seconds < 10){\r\n          return (\r\n              <p>\r\n                    \r\n                  {minutes + \":\" + \"0\" + seconds}\r\n                  \r\n              </p>\r\n\r\n          \r\n                \r\n            );\r\n\r\n      }\r\n        return (\r\n            <p>\r\n                {minutes + \":\" + seconds}\r\n            </p>    \r\n            \r\n        );\r\n           \r\n      \r\n}\r\n\r\n\r\nclass LongBreak extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          second: parseInt(props.startTimeInSeconds, 10) || 0\r\n        };\r\n      }\r\n    \r\n      tick() {\r\n        var sound = this.props.sound.map((sound) => {\r\n          return (\r\n              \r\n                 sound.sound\r\n             \r\n          );\r\n        })\r\n          if(sound[0] == true){\r\n\r\n            if(seconds === 0 && minutes === 0){\r\n                const audioEl = document.getElementsByClassName(\"audio-element\")[0]         \r\n                audioEl.pause()\r\n            \r\n             }\r\n            else {\r\n                const audioEl = document.getElementsByClassName(\"audio-element\")[0]\r\n                audioEl.play()\r\n            }\r\n\r\n\r\n\r\n          }\r\n        this.setState(state => ({\r\n          second: state.second + 1\r\n        }));\r\n      }\r\n    \r\n      componentDidMount() {\r\n        this.interval = setInterval(() => this.tick(), 1000);\r\n      }\r\n    \r\n      componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n      }\r\n\r\n      onetimerun(getTime){\r\n        if (a === 1){\r\n            a = 0;\r\n            \r\n            {CheckTime(getTime)} ;\r\n\r\n        }\r\n      }\r\n\r\n      \r\n\r\n    \r\n    render(){\r\n       \r\n\r\n\r\n       var getTime = this.props.longBreakTime.map((times) => {\r\n            return (\r\n                \r\n                   times.longBreakTime\r\n               \r\n            );\r\n        })\r\n\r\n\r\n        this.onetimerun(getTime);\r\n       \r\n       \r\n\r\n        return(\r\n            <>\r\n            <div className=\"superwrapper\">\r\n              <div className=\"outerwrapper\">\r\n                  <div className=\"settingwrapper\">\r\n                      <a className=\"btnsetting\" href=\"./shortbr\">Short Break</a>\r\n                      <a className=\"btnsetting\" href=\"./setting\">Setting</a>\r\n                      <a className=\"btnsetting\" href=\"./longbr\">Long Break</a>\r\n                  </div>\r\n                  <div className=\"innerwrapper\">\r\n                      <div className=\"currentstate\">\r\n                      <p>Long Break</p>\r\n                      </div>\r\n                      <div className=\"timestarted\">\r\n                          {RunTime()} \r\n                          \r\n                      </div>\r\n                      <div className=\"btnstart\">\r\n                        <a className=\"btnstart\" href=\"./start\">Start Timer</a>\r\n\r\n                      </div>\r\n\r\n                  </div>\r\n                  <audio className=\"audio-element\">\r\n                    <source src=\"./audio/tick.mp3\"></source>\r\n                  </audio>\r\n              </div>\r\n              \r\n          </div>\r\n          </>\r\n        );\r\n        \r\n    }\r\n}\r\n\r\nexport default LongBreak","export const SAVE_SETTING = \"SAVE_SETTING\";","import * as ActionTypes from \"./ActionTypes\";\r\n\r\nexport const saveSetting = (timer, shortBreakTime, longBreakTime, sound = false) => ({\r\n    type:ActionTypes.SAVE_SETTING,\r\n    payload: [{\r\n        timer:timer,\r\n        shortBreakTime:shortBreakTime,\r\n        longBreakTime:longBreakTime,\r\n        sound:sound,\r\n    }]\r\n\r\n});","import React, { Component } from \"react\";\r\nimport { LocalForm , Errors, Control } from \"react-redux-form\";\r\nimport {  withRouter } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { saveSetting } from \"../redux/ActionCreators\";\r\nimport { useHistory } from \"react-router\";\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst maxTime = (val) => Number(val) && (val <= 60);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\n\r\n\r\n\r\n\r\n\r\nfunction Setting()  {\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    function handleSave(values){\r\n\r\n       \r\n        dispatch(saveSetting(parseInt(values.timer), parseInt(values.shortBreakTime), parseInt (values.longBreakTime), values.sound));\r\n        history.push(\"/home\");\r\n       \r\n    }\r\n        return(\r\n\r\n            <div className=\"superwrapper\">\r\n                <div className=\"outerwrapper\">\r\n                    \r\n                    \r\n                    <div className=\"currentstate\">\r\n                        <p>Setting</p>\r\n\r\n                        </div>\r\n                    <LocalForm onSubmit={(values) => handleSave(values)}   className=\"settingform\">\r\n\r\n                        <div className=\"formfieldswrapper\">\r\n\r\n                            <div className=\"formfields\">\r\n                                <label htmlFor=\"timer\">Set Timer:</label>\r\n                                <Control.text model=\".timer\" id=\"timer\" className=\"forminput\"\r\n                                \r\n                                validators={{\r\n                                    required, isNumber,maxLength: maxLength(2), maxTime\r\n                                }}/>\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".timer\"\r\n                                    show=\"touched\"\r\n                                    messages={{\r\n                                        required: 'Required',\r\n                                        isNumber:\"can only be number\",\r\n                                        maxLength: 'Must be 2 number or less',\r\n                                        maxTime: \"Must be 60 Minutes or less\"\r\n                                    }}\r\n                                 />\r\n                            </div>\r\n\r\n\r\n                            <div className=\"formfields\">\r\n                                <label htmlFor=\"shortBreakTime\">Set Short Break:</label>\r\n                                <Control.text model=\".shortBreakTime\" id=\"shortBreakTime\" className=\"forminput\"\r\n                                 validators={{\r\n                                    required, isNumber,maxLength: maxLength(2), maxTime\r\n                                }}/>\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".shortBreakTime\"\r\n                                    show=\"touched\"\r\n                                    messages={{\r\n                                        required: 'Required',\r\n                                        isNumber:\"can only be number\",\r\n                                        maxLength: 'Must be 2 number or less',\r\n                                        maxTime: \"Must be 60 Minutes or less\"\r\n                                    }}\r\n                                 />\r\n                            </div> \r\n\r\n                        </div>\r\n                        <div className=\"formfieldswrapper\">\r\n\r\n                            <div className=\"formfields\">\r\n                                <label htmlFor=\"longBreakTime\">Set Long Break:</label>\r\n                                <Control.text model=\".longBreakTime\" id=\"longBreakTime\" className=\"forminput\" validators={{\r\n                                    required, isNumber,maxLength: maxLength(2), maxTime\r\n                                }}/>\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".longBreakTime\"\r\n                                    show=\"touched\"\r\n                                    messages={{\r\n                                        required: 'Required',\r\n                                        isNumber:\"can only be number\",\r\n                                        maxLength: 'Must be 2 number or less',\r\n                                        maxTime: \"Must be 60 Minutes or less\"\r\n                                    }}\r\n                                 />\r\n                            </div>\r\n                        \r\n\r\n                        \r\n                            <div className=\"formfields\">\r\n                                <p>Sound: </p>\r\n                   \r\n                                <label htmlFor=\"sound\" className=\"switch\">\r\n                \r\n                                    <Control.checkbox  model=\".sound\" id=\"sound\" name=\"sound\" className=\"inputswitch\"/>\r\n                                    <span className=\"slider round\"></span>\r\n\r\n                                </label>\r\n                            </div>    \r\n                        </div>\r\n                                                              \r\n                        <div className=\"btnsubmitcenterd\">\r\n                            <button type=\"submit\" value=\"submit\" className=\"btnsubmit\">Save</button>\r\n                        </div>\r\n                    </LocalForm>\r\n\r\n                </div>\r\n        \r\n        </div>\r\n          \r\n        );\r\n    }\r\n\r\n\r\nexport default withRouter(Setting);","import React,{ Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nclass Pause extends Component {\r\n    render(){\r\n        return(\r\n            <>\r\n            <div className=\"superwrapper\">\r\n            <div className=\"outerwrapper\">\r\n                <div className=\"settingwrapper\">\r\n                    <a className=\"btnsetting\" href=\"./shortbr\">Short Break</a>\r\n                    <a className=\"btnsetting\" href=\"./setting\">Setting</a>\r\n                    <a className=\"btnsetting\" href=\"./longbr\">Long Break</a>\r\n                </div>\r\n                <div className=\"innerwrapper\">\r\n                    <div className=\"timestarted\">\r\n                      \r\n                        \r\n                        <p>\r\n                            Paused\r\n                        </p>  \r\n                        \r\n     \r\n                    </div>\r\n                    <div className=\"btnpauserestart\">\r\n                        <button className=\"btnpause\"><Link to=\"/start\">Resume</Link></button>\r\n                        <button className=\"btnrestart\" ><a href=\"/start\">Restart</a></button>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n            \r\n        </div>\r\n        </> \r\n        );\r\n    }\r\n}\r\n\r\nexport default Pause;","import React,{ Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter, Route, Switch, Redirect } from \"react-router-dom\";\r\nimport StartTimer from \"./startTimerComponent\";\r\nimport ShortBreak from \"./shortBreakComponent\";\r\nimport LongBreak from \"./longBreakComponent\";\r\nimport Setting from \"./settingComponent\";\r\nimport { saveSetting } from \"../redux/ActionCreators\";\r\nimport Pause from \"./PauseComponent\";\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        SettingsReducer : state.SettingsReducer\r\n    };\r\n    \r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    saveSetting: (timer, shortBreakTime,longBreakTime,sound) => dispatch(saveSetting(timer,shortBreakTime,longBreakTime,sound))\r\n\r\n});\r\n\r\nclass Main extends Component {\r\n   \r\n \r\n    render(){\r\n        const homepage = () => {\r\n            return(\r\n                <div className=\"superwrapper\">\r\n                <div className=\"outerwrapper\">\r\n                    <div className=\"settingwrapper\">\r\n                        \r\n                        <a className=\"btnsetting\" href=\"./setting\">Setting</a>\r\n                    </div>\r\n                    <div className=\"innerwrapper\">\r\n                        <div className=\"imgtomato\">\r\n                         \r\n                            <img src=\"./assets/images/tomightly.png\" alt=\"Tomato\"/>\r\n                        </div>\r\n                        <div className=\"btnstart\">\r\n                            <a className=\"btnstart\" href=\"./start\">Start</a>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n                \r\n            </div>\r\n            );\r\n        }\r\n\r\n\r\n\r\n         \r\n        return (\r\n            <Switch>\r\n                <Route path=\"/home\" component={homepage}/>\r\n                <Route path=\"/start\" component = {() => <StartTimer timer = {this.props.SettingsReducer} sound  = {this.props.SettingsReducer} /> } />\r\n                <Route path=\"/shortbr\" component = {() => <ShortBreak shortBreakTime = {this.props.SettingsReducer} sound  = {this.props.SettingsReducer}/> } />\r\n                <Route path=\"/longbr\" component = {() => <LongBreak longBreakTime = {this.props.SettingsReducer} sound  = {this.props.SettingsReducer}/> } />\r\n                <Route path=\"/setting\" component = {() => <Setting  saveSetting = {this.props.saveSetting}/> } />\r\n                <Route path=\"/pause\" component = {() => <Pause/> } />\r\n        \r\n                <Redirect to=\"/home\"/>\r\n            </Switch>\r\n            \r\n        );\r\n    }\r\n}\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));","export const SETTINGS = [\r\n    {\r\n    id:0,\r\n    timer : 30,\r\n    shortBreakTime: 5,\r\n    longBreakTime:10,\r\n    sound: false,\r\n}\r\n]\r\n","import {combineReducers} from \"redux\";\r\nimport { SettingsReducer } from \"./settings\";\r\nimport { persistReducer } from \"redux-persist\";\r\nimport storage  from \"redux-persist/lib/storage\";\r\n\r\nconst persistConfig = {\r\n    key:\"root\",\r\n    storage,\r\n    whitelist: [\"SettingsReducer\"],\r\n}\r\n\r\n\r\nconst allreducer = combineReducers({\r\n    SettingsReducer:SettingsReducer\r\n})\r\n\r\n\r\n\r\n\r\n\r\nexport default persistReducer(persistConfig, allreducer);","import * as ActionTypes from \"../ActionTypes\";\r\nimport { SETTINGS } from \"../../Shared/settings\";\r\n\r\n\r\nexport const SettingsReducer = (state = SETTINGS, action) => {\r\n    switch(action.type){\r\n        case ActionTypes.SAVE_SETTING:\r\n            var setting = action.payload;\r\n            return setting;\r\n        default:\r\n            return state;\r\n    }\r\n    \r\n}","import { createStore} from \"redux\";\r\nimport { persistStore } from \"redux-persist\";\r\nimport allreducer  from \"./reducers/allreducers\";\r\n\r\n\r\nexport const Store = createStore(allreducer,\r\n     window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nexport const persistor = persistStore(Store);\r\n\r\nexport default { Store, persistor };\r\n\r\n\r\n","import './App.scss';\nimport Main from './components/MainComponent';\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Component } from 'react';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport {Store, persistor} from \"./redux/Store\";\n\n\nclass App extends Component {\n  \n  render(){\n    return (\n      <Provider store = {Store}>\n        <BrowserRouter>\n          <div className=\"App\">\n            <PersistGate persistor= {persistor}>\n              <Main/>\n            </PersistGate>\n          </div>\n        </BrowserRouter>\n      </Provider>\n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n \n    <App />,\n\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}